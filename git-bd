#!/bin/bash

set -o errexit
set -o pipefail


function __bd_prompt {
    local msg="$1"
    local regex="$2"

    if [ -n "$regex" ]; then
        msg="$msg $regex"
    fi

    local prompt_done=0
    local response
    while [ "$prompt_done" -eq 0 ]; do
        echo -n "$msg " 1>&2
        read response
        if [[ -z "$regex" || "$response" =~ ^$regex$ ]]; then
            prompt_done=1
        else
            echo "warning: invalid response, please try again" 1>&2
        fi
    done
    echo -n "$response"
}


function __bd_prompt_delete {
    local dir="$1"

    local response
    if test -z "$OPT_f"
    then
        response=$(__bd_prompt  "Are you sure you want to delete '$dir'?" "(y|n)")
    else
        response="y"
    fi
    if [ "$response" == "y" ]; then
        rm -rf "$dir" || true
    else
        if [ "$response" == "n" ]; then
            exit 0
        else
            exit 128
        fi
    fi
}


function __bd_git_dir {
    git config --get bd.git-dir 2> /dev/null || true
}


function __bd_init {
    local git_dir="$(__bd_git_dir)"
    local msg="Enter the master clone:"
    if [ -n "$git_dir" ] && [ -d "$git_dir" ]; then
        msg="$msg [$git_dir]"
    else
        # GIT_DIR is set by git-sh-setup
        git_dir="$(cd -P $GIT_DIR && pwd)"
        if [ -n "$git_dir" ]; then
            msg="$msg [$git_dir]"
        fi
    fi

    local p_git_dir
    if test -z "$OPT_f"
    then
        p_git_dir="$(__bd_prompt "$msg")"
    fi
    if [ -n "$p_git_dir" ]; then
        git_dir="$p_git_dir"
    fi

    local base_dir="$(__bd_base_dir)"
    msg="Enter the base directory for branchdirs:"
    if [ -n "$base_dir" ] && [ -d "$base_dir" ]; then
        msg="$msg [$base_dir]"
    else
        base_dir="$( cd -P $GIT_DIR/../.. && pwd)"
        msg="$msg [$base_dir]"
    fi
    local p_base_dir
    if test -z "$OPT_f"
    then
        p_base_dir="$(__bd_prompt "$msg")"
    fi
    if [ -n "$p_base_dir" ]; then
        base_dir="$p_base_dir"
    fi

    # TODO verify it's a valid directory

    git config --replace-all bd.git-dir "$git_dir"
    git config --replace-all bd.base-dir "$base_dir"

    local response
    if test -z "$OPT_f"
    then
        response=$(__bd_prompt  "Would you like to convert existing branches to brandirs now?" "(y|n)")
    else
        response="n"
    fi
    if [ "$response" == "y" ]; then
        for branch in $(git rev-parse --symbolic --branches); do
            response=$(__bd_prompt  "Would you like to convert '$branch' to a brandir?" "(y|n)")
            if [ "$response" == "y" ]; then
                __bd_new "$branch"
            fi
        done
    fi
}


function __bd_base_dir {
    git config --get bd.base-dir 2> /dev/null || true
}


function __bd_validate_init {
    local base_dir="$(__bd_base_dir)"
    if [ -z "$base_dir" ]; then
        say 'git-bd: is not properly configured.'
        say ''
        say 'Have you `git bd --init` yet?'
        exit 128
    fi
    if ! [ -d "$base_dir" ]; then
        die_with_status 128 'git-bd: base directory does not exist:' $base_dir
    fi

    if ! which git-new-workdir > /dev/null; then
        die_with_status 128 'git-bd: git-new-workdir: command not found'
    fi
}


function __bd_delete {
    local name="$1"
    if [ -z "$name" ]; then
        exit 0
    fi

    local B_OPT
    if [ -n "$OPT_D" ]; then
        B_OPT="-D"
    else
        B_OPT="-d"
    fi

    work_tree="$(git config --get bd.$name.work-tree || true)"
    if [ -z "$work_tree" ]; then
        say "git-bd: branchdir not found: $name"
        if git show-ref --verify --quiet refs/heads/$name; then
            say ''
            say 'Do you just need to delete the branch?'
        fi
        exit 128
    fi
    if [ ! -d "$work_tree" ]; then
        say "git-bd: workdir not found: $work_tree"
        if git show-ref --verify --quiet refs/heads/$name; then
            say ''
            say 'Do you just need to delete the branch?'
        fi
        exit 128
    fi
    if [ "$(git rev-parse --show-toplevel)" == "$work_tree" ]; then
        die_with_status 128 "git-bd: cannot delete the branchdir you are currently in"
    fi
    __bd_prompt_delete "$work_tree"
    if [ -d "$work_tree" ]; then
        die_with_status 128 "git-bd: failed to remove work tree: '$work_tree'"
    fi
    git branch $B_OPT "$name"
    git config --remove-section bd.$name
}


function __bd_move {
    local name="$1"
    local new_name="$2"
    if [ -z "$name" ]; then
        usage
    fi
    if [ -z "$new_name" ]; then
        exit 0
    fi

    local B_OPT
    if [ -n "$OPT_M" ]; then
        B_OPT="-M"
    else
        B_OPT="-m"
    fi

    local base_dir="$(__bd_base_dir)"
    work_tree="$(git config --get bd.$name.work-tree)"
    new_work_tree="$base_dir/$new_name"
    git branch $B_OPT "$name" "$new_name"
    if [ -e "$new_work_tree" ]; then
        if [ -n "$OPT_M" ]; then
            __bd_prompt_delete "$new_work_tree"
            if [ -d "$new_work_tree" ]; then
                git branch -m "$new_name" "$name"
                die_with_status 128 "git-bd: failed to remove existing directory: '$new_work_tree'"
            fi
        else
            git branch -m "$new_name" "$name"
            die_with_status 128 "git-bd: directory named '$new_work_tree' already exists."
        fi
    fi
    mv "$work_tree" "$new_work_tree"
    cd "$new_work_tree"
    git checkout $new_name > /dev/null
    git config --remove-section bd.$name
    git config --add bd.${new_name}.work-tree $new_work_tree
}


function __bd_new {
    local name="$1"
    local start_point="$2"
    if [ -n "$name" ]; then
        local git_dir="$(__bd_git_dir)"
        local base_dir="$(__bd_base_dir)"
        work_tree="$base_dir/$name"
        if [ -d "$work_tree" ]; then
            die_with_status 128 "git-bd: workdir already exists: '$work_tree'"
        fi
        if [ -n "$start_point" ]; then
            git branch $name $start_point
        else
            if git show-ref --verify --quiet refs/heads/$name; then
                echo "Creating branchdir from an existing branch..."
            else
                git branch $name
            fi
        fi
        git-new-workdir $git_dir $work_tree $name 2> /dev/null
        git config --add bd.$name.work-tree $work_tree
        echo "'bd $name' to switch to new branchdir."
    fi
}


function __bd_list {
    local base_dir="$(__bd_base_dir)"
    HEAD="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"
    git config --get-regexp bd\..*\.work-tree \
        | sed -e 's/bd\..*\.work-tree/ /' \
        | sed -e "s|$base_dir/*||" \
        | sed -e "s|  $HEAD$|* $HEAD|"
}


function __bd {
    # OPTIONS_SPEC is parsed by git-sh-setup
    # GIT_DIR is set by git-sh-setup
    source "$(git --exec-path)/git-sh-setup"

    while [ $# -gt 0 ]; do
        OPT="$1"
        shift
        case $OPT in
            --) break ;;
            -m) OPT_m=1 ;;
            -M) OPT_M=1 ;;
            -d) OPT_d=1 ;;
            -D) OPT_D=1 ;;
            -f) OPT_f=1 ;;
            --init) OPT_init=1 ;;
        esac
    done

    if [ -n "$OPT_init" ]; then
        __bd_init
        exit 0
    else
        __bd_validate_init
    fi

    # validate name?

    local work_tree

    if [[ (-n "$OPT_d" || -n "$OPT_D") && (-n "$OPT_m" || -n "$OPT_M") ]]; then
        usage
        exit 128
    fi
    if [[ -n "$OPT_D" || -n "$OPT_d" ]]; then
        __bd_delete "$@"
        exit 0
    fi
    if [[ -n "$OPT_M" || -n "$OPT_m" ]]; then
        __bd_move "$@"
        exit 0
    fi

    if [ $# -gt 0 ]; then
        __bd_new "$@"
        exit 0
    else
        __bd_list
        exit 0
    fi
}


SUBDIRECTORY_OK=1
OPTIONS_SPEC="\
git bd <branchdir> [<start-point>]
git bd [-f] (-m | -M) <oldbranchdir> <newbranchdir>
git bd [-f] (-d | -D) <branchdir>
--
h,help  show the help
init    Initialize 'git-bd'.
m       Move/rename a branchdir.
M       Move/rename a branchdir even if the new branchdir already exists.
d       Delete a branchdir.
D       Delete a branchdir irrespective of its merged status.
f       Suppress confirmation prompts.
"


__bd $@
